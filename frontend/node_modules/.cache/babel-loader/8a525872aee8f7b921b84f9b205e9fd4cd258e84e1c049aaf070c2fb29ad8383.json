{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport { InMemorySignalProtocolStore } from \"../../public/InMemorySignalProtocolStore\";\nimport axios from \"axios\";\nconst ls = window.libsignal;\nconst KeyHelper = ls.KeyHelper;\nconst api = axios.create({\n  baseURL: 'http://localhost:9090'\n});\nconst arrayBufferToBase64 = buffer => {\n  let binary = '';\n  let bytes = new Uint8Array(buffer);\n  let len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n};\n\n// Util import from src/helpers.js\nvar util = function () {\n  'use strict';\n\n  var StaticArrayBufferProto = new ArrayBuffer().__proto__;\n  return {\n    toString: function (thing) {\n      if (typeof thing == 'string') {\n        return thing;\n      }\n      return new dcodeIO.ByteBuffer.wrap(thing).toString('binary');\n    },\n    toArrayBuffer: function (thing) {\n      if (thing === undefined) {\n        return undefined;\n      }\n      if (thing === Object(thing)) {\n        if (thing.__proto__ === StaticArrayBufferProto) {\n          return thing;\n        }\n      }\n      var str;\n      if (typeof thing == \"string\") {\n        str = thing;\n      } else {\n        throw new Error(\"Tried to convert a non-string of type \" + typeof thing + \" to an array buffer\");\n      }\n      return new dcodeIO.ByteBuffer.wrap(thing, 'binary').toArrayBuffer();\n    },\n    isEqual: function (a, b) {\n      // TODO: Special-case arraybuffers, etc\n      if (a === undefined || b === undefined) {\n        return false;\n      }\n      a = util.toString(a);\n      b = util.toString(b);\n      var maxLength = Math.max(a.length, b.length);\n      if (maxLength < 5) {\n        throw new Error(\"a/b compare too short\");\n      }\n      return a.substring(0, Math.min(maxLength, a.length)) === b.substring(0, Math.min(maxLength, b.length));\n    }\n  };\n}();\nconst base64ToArrayBuffer = base64 => {\n  let binary_string = window.atob(base64);\n  let len = binary_string.length;\n  let bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n};\nconst DEFAULT_NUMBER_OF_PRE_KEYS = 5;\n// Generate multiple PreKeys (as per documentation)\nasync function generatePreKeys(registrationId) {\n  let listOfPreKeysPromise = [];\n  for (let i = 0; i < DEFAULT_NUMBER_OF_PRE_KEYS; i++) {\n    listOfPreKeysPromise.push(KeyHelper.generatePreKey(registrationId + i + 1));\n  }\n  const resolvedPreKeys = await Promise.all(listOfPreKeysPromise);\n  const preKeys = resolvedPreKeys.map(preKey => {\n    // Create a preKey keyPair, these keys can be stored in the client\n    return {\n      keyId: preKey.keyId,\n      keyPair: preKey.keyPair\n    };\n  });\n  return {\n    preKeys\n  };\n}\nexport default createStore({\n  state: {\n    userId: null,\n    registrationId: null,\n    identityKeyPair: null,\n    signedPreKey: null,\n    preKeys: null,\n    // store needs to be a SignalProtocolStore impl\n    // used to build sessions and handle messages\n    // holds pre-keys for other users\n    store: null,\n    friendList: []\n  },\n  getters: {\n    getUserId(state) {\n      return state.userId;\n    },\n    getRegistrationId(state) {\n      console.log(`getters ${state.registrationId}`);\n      return state.registrationId;\n    },\n    getUser(state) {\n      return state.userId + '-' + state.registrationId;\n    }\n  },\n  mutations: {\n    ['setup-registration'](state, [userId, registrationId, identityKeyPair, preKeys, signedPreKey]) {\n      console.log('setup registration');\n      console.log(userId);\n      console.log(registrationId);\n      state.userId = parseInt(userId);\n      state.registrationId = parseInt(registrationId);\n      console.log(state.userId);\n      console.log(state.registrationId);\n      state.identityKeyPair = identityKeyPair;\n      state.signedPreKey = signedPreKey;\n      state.preKeys = preKeys;\n      console.log(identityKeyPair);\n      state.store = new InMemorySignalProtocolStore();\n      state.store.put('userId', userId);\n      state.store.put('registrationId', registrationId);\n      state.store.put('identityKey', identityKeyPair);\n      preKeys.forEach(({\n        keyId,\n        keyPair\n      }) => {\n        // needs to be in SignalProtocolStore\n        state.store.storePreKey(keyId, keyPair);\n      });\n      state.store.storeSignedPreKey(signedPreKey.keyId, signedPreKey.keyPair);\n      // localStorage.setItem(userId,state.store)\n    }\n  },\n\n  actions: {\n    async ['registration'](context, userId) {\n      console.log(\"inside registration\");\n      if (localStorage.getItem(userId) != null) {\n        console.log(\"not null\");\n        let localInfo = JSON.parse(localStorage.getItem(userId));\n        const uid = parseInt(localInfo.userId);\n        const registrationId = parseInt(localInfo.registrationId);\n        let identityKeyPair = localInfo.identityKeyPair;\n        identityKeyPair.pubKey = base64ToArrayBuffer(identityKeyPair.pubKey);\n        identityKeyPair.privKey = base64ToArrayBuffer(identityKeyPair.privKey);\n        let signedPreKey = localInfo.signedPreKey;\n        signedPreKey.keyId = parseInt(signedPreKey.keyId);\n        signedPreKey.keyPair.pubKey = base64ToArrayBuffer(signedPreKey.keyPair.pubKey);\n        signedPreKey.keyPair.privKey = base64ToArrayBuffer(signedPreKey.keyPair.privKey);\n        signedPreKey.signature = base64ToArrayBuffer(signedPreKey.signature);\n        let preKeys = localInfo.preKeys.map(rawPreKey => {\n          return {\n            keyId: parseInt(rawPreKey.keyId),\n            keyPair: {\n              pubKey: base64ToArrayBuffer(rawPreKey.keyPair.pubKey),\n              privKey: base64ToArrayBuffer(rawPreKey.keyPair.privKey)\n            }\n          };\n        });\n        context.commit('setup-registration', [uid, registrationId, identityKeyPair, preKeys, signedPreKey]);\n        return {\n          registrationId: registrationId,\n          code: 400\n        };\n      }\n      console.info(`Generating registration ID for user [${userId}]`);\n      const uid = parseInt(userId);\n      console.log(uid);\n      const registrationId = parseInt(KeyHelper.generateRegistrationId());\n      console.log(registrationId);\n      const identityKeyPair = await KeyHelper.generateIdentityKeyPair();\n      console.log(identityKeyPair);\n      const {\n        preKeys\n      } = await generatePreKeys(registrationId);\n      const signedPreKey = await KeyHelper.generateSignedPreKey(identityKeyPair, registrationId);\n      console.log(signedPreKey);\n      context.commit('setup-registration', [uid, registrationId, identityKeyPair, preKeys, signedPreKey]);\n      return {\n        registrationId: registrationId,\n        code: 200\n      };\n    },\n    async ['send-keys-to-server'](context) {\n      let reqObj = {\n        userId: parseInt(context.state.userId),\n        registrationId: parseInt(context.state.registrationId),\n        identityKey: arrayBufferToBase64(context.state.identityKeyPair.pubKey),\n        signedPreKey: {\n          keyId: parseInt(context.state.signedPreKey.keyId),\n          publicKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.pubKey),\n          signature: arrayBufferToBase64(context.state.signedPreKey.signature)\n        },\n        preKeys: context.state.preKeys.map(preKey => {\n          return {\n            keyId: parseInt(preKey.keyId),\n            publicKey: arrayBufferToBase64(preKey.keyPair.pubKey)\n          };\n        })\n      };\n      console.log(reqObj);\n      await api.post('/keysOf/' + context.state.userId, reqObj);\n      return 'ok';\n    },\n    async ['get-key-bundle-of'](context, destinationUserId) {\n      let httpResponse = await api.get('/keyOf/' + destinationUserId);\n      return await context.dispatch('process-key', httpResponse.data);\n    },\n    async ['process-key'](context, initialKeyBundle) {\n      console.log(initialKeyBundle);\n      let userId = parseInt(initialKeyBundle.userId);\n      let registrationId = parseInt(initialKeyBundle.registrationId);\n      if (context.state.friendList.includes(userId)) {\n        return true;\n      } else {\n        context.state.friendList.push(userId);\n      }\n      const address = new ls.SignalProtocolAddress(registrationId, userId);\n      const sessionBuilder = new ls.SessionBuilder(context.state.store, address);\n      let keys = initialKeyBundle;\n      keys.identityKey = base64ToArrayBuffer(keys.identityKey);\n      keys.signedPreKey.publicKey = base64ToArrayBuffer(keys.signedPreKey.publicKey);\n      keys.signedPreKey.signature = base64ToArrayBuffer(keys.signedPreKey.signature);\n      keys.preKey.publicKey = base64ToArrayBuffer(keys.preKey.publicKey);\n      console.log(`Pre keys processed:`, keys);\n      await sessionBuilder.processPreKey(keys);\n      return true;\n    },\n    async ['encrypt-message'](context, msg) {\n      console.log(msg);\n      const address = new ls.SignalProtocolAddress(msg.destinationRegistrationId, msg.destinationUserId);\n      console.log(context.state.store);\n      console.log(context.state.userId);\n      console.log(context.state.registrationId);\n      const sessionCipher = new ls.SessionCipher(context.state.store, address);\n      const ciphertext = await sessionCipher.encrypt(msg.myMsg);\n      console.log(3);\n      console.log(msg.destinationUserId);\n      console.log(msg.destinationRegistrationId);\n      let resObj = {\n        groupId: msg.groupId,\n        destinationUserId: msg.destinationUserId,\n        destinationRegistrationId: msg.destinationRegistrationId,\n        sourceUserId: context.state.userId,\n        sourceRegistrationId: context.state.registrationId,\n        ciphertext: ciphertext,\n        time: msg.time\n      };\n      console.log(resObj);\n      return resObj;\n    },\n    async ['decrypt-message'](context, msg) {\n      const groupId = parseInt(msg.groupId);\n      const userId = parseInt(msg.sourceUserId);\n      const registrationId = parseInt(msg.sourceRegistrationId);\n      const time = msg.time;\n      let fromAddress = new ls.SignalProtocolAddress(registrationId, userId);\n      console.log(\"context.  .store:\" + context.state.store);\n      //\n      // var temp = localStorage.getItem(msg.sourceUserId);\n      // context.state.store = localStorage.getItem(msg.sourceUserId);\n      let sessionCipher = new ls.SessionCipher(context.state.store, fromAddress);\n      let plaintext;\n      if (parseInt(msg.ciphertext.type) === 3) {\n        console.log(`Cipher message type 3: decryptPreKeyWhisperMessage`);\n        console.log(msg.ciphertext.body);\n        plaintext = await sessionCipher.decryptPreKeyWhisperMessage(msg.ciphertext.body, 'binary');\n      } else if (parseInt(msg.ciphertext.type) === 1) {\n        console.log(`Cipher message type 1: decryptWhisperMessage`);\n        plaintext = await sessionCipher.decryptWhisperMessage(msg.ciphertext.body, 'binary');\n      }\n      console.log(plaintext);\n      let decryptedMessage = util.toString(plaintext);\n      console.log(`Decrypted message:`, decryptedMessage);\n      alert(\"Cost:\" + (Date.now() - time) + \"ms\");\n      return decryptedMessage;\n    },\n    async ['store-info'](context) {\n      let storeObj = {\n        userId: context.state.userId,\n        registrationId: context.state.registrationId,\n        identityKeyPair: {\n          pubKey: arrayBufferToBase64(context.state.identityKeyPair.pubKey),\n          privKey: arrayBufferToBase64(context.state.identityKeyPair.privKey)\n        },\n        signedPreKey: {\n          keyId: parseInt(context.state.signedPreKey.keyId),\n          keyPair: {\n            pubKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.pubKey),\n            privKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.privKey)\n          },\n          signature: arrayBufferToBase64(context.state.signedPreKey.signature)\n        },\n        preKeys: context.state.preKeys.map(preKey => {\n          return {\n            keyId: parseInt(preKey.keyId),\n            keyPair: {\n              pubKey: arrayBufferToBase64(preKey.keyPair.pubKey),\n              privKey: arrayBufferToBase64(preKey.keyPair.privKey)\n            }\n          };\n        })\n      };\n      localStorage.setItem(context.state.userId, JSON.stringify(storeObj));\n      return 200;\n    },\n    async ['check-info'](context, userId) {\n      // let resObj;\n      // resObj = JSON.parse(localStorage.getItem(userId));\n      // console.log(resObj.userId)\n      // console.log(resObj)\n      // context.state.userId = resObj.userId;\n      // console.log(resObj.userId)\n      // console.log(context.state.userId)\n      // context.state.registrationId=resObj.registrationId;\n      // context.state.identityKeyPair.pubKey=base64ToArrayBuffer(resObj.identityKeyPair.pubKey);\n      // context.state.identityKeyPair.privKey=base64ToArrayBuffer(resObj.identityKeyPair.privKey);\n      //\n      // context.state.signedPreKey.keyId=resObj.keyId;\n      // context.state.signedPreKey.keyPair.pubKey=base64ToArrayBuffer(resObj.signedPreKey.keyPair.pubKey);\n      // context.state.signedPreKey.keyPair.privKey=base64ToArrayBuffer(resObj.signedPreKey.keyPair.privKey);\n      // context.state.signedPreKey.signature = base64ToArrayBuffer(resObj.signedPreKey.signature);\n      //\n      // resObj.preKeys.map((preKey)=>{\n      //     context.state.preKeys.add(preKey)\n      //     }\n      // )\n      //\n      //\n      // return resObj;\n      let resObj;\n      resObj = JSON.parse(localStorage.getItem(userId));\n      return resObj;\n    },\n    async ['delete-info'](context, userId) {\n      localStorage.removeItem(userId);\n      return 400;\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","InMemorySignalProtocolStore","axios","ls","window","libsignal","KeyHelper","api","create","baseURL","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","util","StaticArrayBufferProto","ArrayBuffer","__proto__","toString","thing","dcodeIO","ByteBuffer","wrap","toArrayBuffer","undefined","Object","str","Error","isEqual","a","b","maxLength","Math","max","length","substring","min","base64ToArrayBuffer","base64","binary_string","atob","charCodeAt","DEFAULT_NUMBER_OF_PRE_KEYS","generatePreKeys","registrationId","listOfPreKeysPromise","push","generatePreKey","resolvedPreKeys","Promise","all","preKeys","map","preKey","keyId","keyPair","state","userId","identityKeyPair","signedPreKey","store","friendList","getters","getUserId","getRegistrationId","console","log","getUser","mutations","setup-registration","parseInt","put","forEach","storePreKey","storeSignedPreKey","actions","registration","context","localStorage","getItem","localInfo","JSON","parse","uid","pubKey","privKey","signature","rawPreKey","commit","code","info","generateRegistrationId","generateIdentityKeyPair","generateSignedPreKey","send-keys-to-server","reqObj","identityKey","publicKey","post","get-key-bundle-of","destinationUserId","httpResponse","get","dispatch","data","process-key","initialKeyBundle","includes","address","SignalProtocolAddress","sessionBuilder","SessionBuilder","keys","processPreKey","encrypt-message","msg","destinationRegistrationId","sessionCipher","SessionCipher","ciphertext","encrypt","myMsg","resObj","groupId","sourceUserId","sourceRegistrationId","time","decrypt-message","fromAddress","plaintext","type","body","decryptPreKeyWhisperMessage","decryptWhisperMessage","decryptedMessage","alert","Date","now","store-info","storeObj","setItem","stringify","check-info","delete-info","removeItem","modules"],"sources":["C:/Users/25707/Desktop/112/工作准备/软件方向/E2EE/E2EE/src/store/index.js"],"sourcesContent":["import {createStore} from 'vuex'\r\nimport {InMemorySignalProtocolStore} from \"../../public/InMemorySignalProtocolStore\";\r\nimport axios from \"axios\";\r\n\r\nconst ls = window.libsignal;\r\nconst KeyHelper = ls.KeyHelper;\r\nconst api = axios.create({baseURL: 'http://localhost:9090'})\r\n\r\nconst arrayBufferToBase64 = (buffer) => {\r\n    let binary = '';\r\n    let bytes = new Uint8Array(buffer);\r\n    let len = bytes.byteLength;\r\n    for (let i = 0; i < len; i++) {\r\n        binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n};\r\n\r\n// Util import from src/helpers.js\r\nvar util = (function () {\r\n    'use strict';\r\n\r\n    var StaticArrayBufferProto = new ArrayBuffer().__proto__;\r\n\r\n    return {\r\n        toString: function (thing) {\r\n            if (typeof thing == 'string') {\r\n                return thing;\r\n            }\r\n            return new dcodeIO.ByteBuffer.wrap(thing).toString('binary');\r\n        },\r\n        toArrayBuffer: function (thing) {\r\n            if (thing === undefined) {\r\n                return undefined;\r\n            }\r\n            if (thing === Object(thing)) {\r\n                if (thing.__proto__ === StaticArrayBufferProto) {\r\n                    return thing;\r\n                }\r\n            }\r\n\r\n            var str;\r\n            if (typeof thing == \"string\") {\r\n                str = thing;\r\n            } else {\r\n                throw new Error(\"Tried to convert a non-string of type \" + typeof thing + \" to an array buffer\");\r\n            }\r\n            return new dcodeIO.ByteBuffer.wrap(thing, 'binary').toArrayBuffer();\r\n        },\r\n        isEqual: function (a, b) {\r\n            // TODO: Special-case arraybuffers, etc\r\n            if (a === undefined || b === undefined) {\r\n                return false;\r\n            }\r\n            a = util.toString(a);\r\n            b = util.toString(b);\r\n            var maxLength = Math.max(a.length, b.length);\r\n            if (maxLength < 5) {\r\n                throw new Error(\"a/b compare too short\");\r\n            }\r\n            return a.substring(0, Math.min(maxLength, a.length)) === b.substring(0, Math.min(maxLength, b.length));\r\n        }\r\n    };\r\n})();\r\n\r\nconst base64ToArrayBuffer = (base64) => {\r\n    let binary_string = window.atob(base64);\r\n    let len = binary_string.length;\r\n    let bytes = new Uint8Array(len);\r\n    for (let i = 0; i < len; i++) {\r\n        bytes[i] = binary_string.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n};\r\n\r\n\r\nconst DEFAULT_NUMBER_OF_PRE_KEYS = 5;\r\n// Generate multiple PreKeys (as per documentation)\r\nasync function generatePreKeys (registrationId) {\r\n    let listOfPreKeysPromise = [];\r\n    for (let i = 0; i < DEFAULT_NUMBER_OF_PRE_KEYS; i++) {\r\n        listOfPreKeysPromise.push(KeyHelper.generatePreKey(registrationId + i + 1));\r\n    }\r\n\r\n    const resolvedPreKeys = await Promise.all(listOfPreKeysPromise);\r\n\r\n    const preKeys = resolvedPreKeys.map(preKey => {\r\n        // Create a preKey keyPair, these keys can be stored in the client\r\n        return {\r\n            keyId: preKey.keyId,\r\n            keyPair: preKey.keyPair\r\n        };\r\n    });\r\n\r\n    return {\r\n        preKeys\r\n    };\r\n}\r\nexport default createStore({\r\n    state: {\r\n        userId: null,\r\n        registrationId: null,\r\n        identityKeyPair: null,\r\n        signedPreKey: null,\r\n        preKeys: null,\r\n        // store needs to be a SignalProtocolStore impl\r\n        // used to build sessions and handle messages\r\n        // holds pre-keys for other users\r\n        store: null,\r\n        friendList:[]\r\n    },\r\n    getters: {\r\n        getUserId(state) {\r\n            return state.userId;\r\n        },\r\n        getRegistrationId(state){\r\n            console.log(`getters ${state.registrationId}`);\r\n            return state.registrationId;\r\n        },\r\n        getUser(state){\r\n            return state.userId + '-' + state.registrationId;\r\n        }\r\n    },\r\n    mutations: {\r\n        ['setup-registration'] (state, [userId, registrationId, identityKeyPair, preKeys, signedPreKey]){\r\n            console.log('setup registration')\r\n            console.log(userId);\r\n            console.log(registrationId);\r\n            state.userId = parseInt(userId);\r\n            state.registrationId = parseInt(registrationId);\r\n            console.log(state.userId);\r\n            console.log(state.registrationId);\r\n            state.identityKeyPair = identityKeyPair;\r\n            state.signedPreKey = signedPreKey;\r\n            state.preKeys = preKeys;\r\n            console.log(identityKeyPair);\r\n\r\n            state.store = new InMemorySignalProtocolStore();\r\n            state.store.put('userId',userId);\r\n            state.store.put('registrationId', registrationId);\r\n            state.store.put('identityKey', identityKeyPair);\r\n            preKeys.forEach(({keyId, keyPair}) => {\r\n                // needs to be in SignalProtocolStore\r\n                state.store.storePreKey(keyId, keyPair);\r\n            });\r\n            state.store.storeSignedPreKey(signedPreKey.keyId, signedPreKey.keyPair);\r\n            // localStorage.setItem(userId,state.store)\r\n        },\r\n    },\r\n    actions: {\r\n        async ['registration'] (context, userId) {\r\n            console.log(\"inside registration\")\r\n            if(localStorage.getItem(userId) != null){\r\n                console.log(\"not null\")\r\n                let localInfo = JSON.parse(localStorage.getItem(userId));\r\n                const uid = parseInt(localInfo.userId);\r\n                const registrationId = parseInt(localInfo.registrationId);\r\n                let identityKeyPair = localInfo.identityKeyPair;\r\n                identityKeyPair.pubKey = base64ToArrayBuffer(identityKeyPair.pubKey);\r\n                identityKeyPair.privKey = base64ToArrayBuffer(identityKeyPair.privKey);\r\n                let signedPreKey = localInfo.signedPreKey;\r\n                signedPreKey.keyId = parseInt(signedPreKey.keyId);\r\n                signedPreKey.keyPair.pubKey = base64ToArrayBuffer(signedPreKey.keyPair.pubKey);\r\n                signedPreKey.keyPair.privKey = base64ToArrayBuffer(signedPreKey.keyPair.privKey);\r\n                signedPreKey.signature = base64ToArrayBuffer(signedPreKey.signature);\r\n                let preKeys = localInfo.preKeys.map(rawPreKey => {\r\n                    return {\r\n                        keyId: parseInt(rawPreKey.keyId),\r\n                        keyPair: {\r\n                            pubKey: base64ToArrayBuffer(rawPreKey.keyPair.pubKey),\r\n                            privKey: base64ToArrayBuffer(rawPreKey.keyPair.privKey),\r\n                        }\r\n                    };\r\n                });\r\n                context.commit('setup-registration',\r\n                    [uid, registrationId, identityKeyPair, preKeys, signedPreKey]);\r\n                return {\r\n                    registrationId: registrationId,\r\n                    code: 400\r\n                };\r\n            }\r\n            console.info(`Generating registration ID for user [${userId}]`);\r\n            const uid = parseInt(userId);\r\n            console.log(uid);\r\n\r\n            const registrationId = parseInt(KeyHelper.generateRegistrationId());\r\n            console.log(registrationId);\r\n            const identityKeyPair = await KeyHelper.generateIdentityKeyPair();\r\n            console.log(identityKeyPair);\r\n            const {preKeys} = await generatePreKeys(registrationId);\r\n            const signedPreKey = await KeyHelper.generateSignedPreKey(identityKeyPair, registrationId);\r\n            console.log(signedPreKey);\r\n            context.commit('setup-registration',\r\n                [uid, registrationId, identityKeyPair, preKeys, signedPreKey]);\r\n\r\n            return {\r\n                registrationId: registrationId,\r\n                code: 200\r\n            };\r\n        },\r\n        async ['send-keys-to-server'] (context) {\r\n            let reqObj = {\r\n                userId: parseInt(context.state.userId),\r\n                registrationId: parseInt(context.state.registrationId),\r\n                identityKey: arrayBufferToBase64(context.state.identityKeyPair.pubKey),\r\n                signedPreKey: {\r\n                    keyId: parseInt(context.state.signedPreKey.keyId),\r\n                    publicKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.pubKey),\r\n                    signature: arrayBufferToBase64(context.state.signedPreKey.signature)\r\n                },\r\n                preKeys: context.state.preKeys.map((preKey) => {\r\n                    return {\r\n                        keyId: parseInt(preKey.keyId),\r\n                        publicKey: arrayBufferToBase64(preKey.keyPair.pubKey)\r\n                    };\r\n                })\r\n            };\r\n            console.log(reqObj);\r\n            await api.post('/keysOf/' + context.state.userId, reqObj);\r\n            return 'ok';\r\n        },\r\n        async ['get-key-bundle-of'] (context, destinationUserId){\r\n            let httpResponse = await api.get('/keyOf/'+destinationUserId);\r\n            return await context.dispatch('process-key', httpResponse.data);\r\n        },\r\n        async ['process-key'] (context, initialKeyBundle){\r\n            console.log(initialKeyBundle);\r\n            let userId = parseInt(initialKeyBundle.userId);\r\n            let registrationId = parseInt(initialKeyBundle.registrationId);\r\n            if(context.state.friendList.includes(userId)){\r\n                return true;\r\n            }\r\n            else{\r\n                context.state.friendList.push(userId);\r\n            }\r\n            const address = new ls.SignalProtocolAddress(registrationId, userId);\r\n            const sessionBuilder = new ls.SessionBuilder(context.state.store, address);\r\n\r\n            let keys = initialKeyBundle;\r\n            keys.identityKey = base64ToArrayBuffer(keys.identityKey);\r\n            keys.signedPreKey.publicKey = base64ToArrayBuffer(keys.signedPreKey.publicKey);\r\n            keys.signedPreKey.signature = base64ToArrayBuffer(keys.signedPreKey.signature);\r\n            keys.preKey.publicKey = base64ToArrayBuffer(keys.preKey.publicKey);\r\n\r\n            console.log(`Pre keys processed:`, keys);\r\n\r\n            await sessionBuilder.processPreKey(keys);\r\n\r\n            return true;\r\n        },\r\n        async ['encrypt-message'] (context, msg){\r\n            console.log(msg);\r\n            const address = new ls.SignalProtocolAddress(msg.destinationRegistrationId, msg.destinationUserId);\r\n            console.log(context.state.store)\r\n            console.log(context.state.userId)\r\n            console.log(context.state.registrationId)\r\n            const sessionCipher = new ls.SessionCipher(context.state.store, address);\r\n            const ciphertext = await sessionCipher.encrypt(msg.myMsg);\r\n            console.log(3)\r\n            console.log(msg.destinationUserId)\r\n            console.log(msg.destinationRegistrationId)\r\n\r\n\r\n\r\n            let resObj = {\r\n                groupId:msg.groupId,\r\n                destinationUserId: msg.destinationUserId,\r\n                destinationRegistrationId: msg.destinationRegistrationId,\r\n                sourceUserId: context.state.userId,\r\n                sourceRegistrationId: context.state.registrationId,\r\n                ciphertext: ciphertext,\r\n                time:msg.time\r\n            };\r\n            console.log(resObj);\r\n            return resObj;\r\n        },\r\n        async ['decrypt-message'] (context, msg){\r\n            const groupId = parseInt(msg.groupId)\r\n            const userId = parseInt(msg.sourceUserId)\r\n            const registrationId = parseInt(msg.sourceRegistrationId);\r\n            const time=msg.time;\r\n            let fromAddress = new ls.SignalProtocolAddress(registrationId, userId);\r\n            console.log(\"context.  .store:\" +context.state.store)\r\n            //\r\n            // var temp = localStorage.getItem(msg.sourceUserId);\r\n            // context.state.store = localStorage.getItem(msg.sourceUserId);\r\n            let sessionCipher = new ls.SessionCipher(context.state.store, fromAddress);\r\n            let plaintext\r\n            if (parseInt(msg.ciphertext.type) === 3) {\r\n                console.log(`Cipher message type 3: decryptPreKeyWhisperMessage`);\r\n                console.log(msg.ciphertext.body)\r\n                plaintext = await sessionCipher.decryptPreKeyWhisperMessage(msg.ciphertext.body, 'binary');\r\n            } else if (parseInt(msg.ciphertext.type) === 1) {\r\n                console.log(`Cipher message type 1: decryptWhisperMessage`);\r\n                plaintext = await sessionCipher.decryptWhisperMessage(msg.ciphertext.body, 'binary');\r\n            }\r\n            console.log(plaintext);\r\n            let decryptedMessage = util.toString(plaintext);\r\n            console.log(`Decrypted message:`, decryptedMessage);\r\n            alert(\"Cost:\"+(Date.now()-time)+\"ms\");\r\n            return decryptedMessage;\r\n        },\r\n        async ['store-info'] (context) {\r\n            let storeObj = {\r\n                userId: context.state.userId,\r\n                registrationId: context.state.registrationId,\r\n                identityKeyPair: {\r\n                    pubKey: arrayBufferToBase64(context.state.identityKeyPair.pubKey),\r\n                    privKey: arrayBufferToBase64(context.state.identityKeyPair.privKey)\r\n                },\r\n                signedPreKey: {\r\n                    keyId: parseInt(context.state.signedPreKey.keyId),\r\n                    keyPair: {\r\n                        pubKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.pubKey),\r\n                        privKey: arrayBufferToBase64(context.state.signedPreKey.keyPair.privKey),\r\n                    },\r\n                    signature: arrayBufferToBase64(context.state.signedPreKey.signature)\r\n                },\r\n                preKeys: context.state.preKeys.map((preKey) => {\r\n                    return {\r\n                        keyId: parseInt(preKey.keyId),\r\n                        keyPair: {\r\n                            pubKey: arrayBufferToBase64(preKey.keyPair.pubKey),\r\n                            privKey: arrayBufferToBase64(preKey.keyPair.privKey),\r\n                        }\r\n                    };\r\n                })\r\n            };\r\n            localStorage.setItem(context.state.userId, JSON.stringify(storeObj));\r\n            return 200;\r\n        },\r\n        async ['check-info'] (context, userId) {\r\n            // let resObj;\r\n            // resObj = JSON.parse(localStorage.getItem(userId));\r\n            // console.log(resObj.userId)\r\n            // console.log(resObj)\r\n            // context.state.userId = resObj.userId;\r\n            // console.log(resObj.userId)\r\n            // console.log(context.state.userId)\r\n            // context.state.registrationId=resObj.registrationId;\r\n            // context.state.identityKeyPair.pubKey=base64ToArrayBuffer(resObj.identityKeyPair.pubKey);\r\n            // context.state.identityKeyPair.privKey=base64ToArrayBuffer(resObj.identityKeyPair.privKey);\r\n            //\r\n            // context.state.signedPreKey.keyId=resObj.keyId;\r\n            // context.state.signedPreKey.keyPair.pubKey=base64ToArrayBuffer(resObj.signedPreKey.keyPair.pubKey);\r\n            // context.state.signedPreKey.keyPair.privKey=base64ToArrayBuffer(resObj.signedPreKey.keyPair.privKey);\r\n            // context.state.signedPreKey.signature = base64ToArrayBuffer(resObj.signedPreKey.signature);\r\n            //\r\n            // resObj.preKeys.map((preKey)=>{\r\n            //     context.state.preKeys.add(preKey)\r\n            //     }\r\n            // )\r\n            //\r\n            //\r\n            // return resObj;\r\n            let resObj;\r\n            resObj = JSON.parse(localStorage.getItem(userId));\r\n            return resObj;\r\n        },\r\n        async ['delete-info'] (context, userId) {\r\n            localStorage.removeItem(userId);\r\n            return 400;\r\n        }\r\n    },\r\n    modules: {}\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}