{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useStore } from 'vuex';\nexport default {\n  setup() {\n    const store = useStore(); // 该方法用于返回store 实例\n    console.log(store); // store 实例对象\n    return {\n      store\n    };\n  },\n  name: \"ChatPage\",\n  created() {\n    console.log('created');\n    this.initWebSocket();\n  },\n  data() {\n    return {\n      getMessage: false,\n      message: {\n        groupId: -1,\n        destinationUserId: '',\n        destinationRegistrationId: '',\n        myMsg: '',\n        time: ''\n      },\n      websocket: null,\n      recvMsg: {},\n      msgList: [],\n      memberList: [],\n      memberOne: '',\n      groupID: '',\n      msg: ''\n    };\n  },\n  methods: {\n    addOne() {\n      this.memberList.push(this.memberOne);\n      this.memberOne = '';\n    },\n    cGroup() {\n      this.memberList.push(this.groupID);\n      this.$http.post('/createGroup', {\n        // groupId: this.groupID,//群聊ID，就用这个来识别群聊，应该吧，或者还要生成RID啥的\n        groupMember: this.memberList //字面意思，list里是昵称\n        // userId: this.message.destinationUserId//记录创群人是谁，可有可无\n      }).then(async e => {\n        console.log(e.data);\n      });\n      this.groupID = '';\n      this.memberList = [];\n    },\n    sendmessage() {\n      this.getMessage = true;\n    },\n    send() {\n      console.log('send');\n      if (this.message.groupId !== -1) {\n        this.$http.post('/groupOrIndividual', {\n          groupId: this.message.groupId\n          // userId: this.message.destinationUserId\n        }).then(async e => {\n          this.message.time = Date.now();\n          console.log(this.message.time);\n          this.msgList.push(\"####::\" + this.message.myMsg);\n          for (const key in e.data) {\n            alert(key);\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\n            if (getBundleResult) {\n              this.message.destinationUserId = key;\n              this.message.destinationRegistrationId = e.data[key];\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\n              alert(1);\n              await this.websocketSend(JSON.stringify(cipherText));\n            }\n            alert('ok');\n          }\n          this.message.myMsg = '';\n        });\n      } else {\n        console.log(this.message.myMsg);\n        this.$http.post('/groupOrIndividual', {\n          groupId: -1,\n          userId: this.message.destinationUserId\n        }).then(async e => {\n          // alert(key+' '+e.data[key])\n          for (const key in e.data) {\n            console.log(this.message.destinationUserId);\n            console.log(this.message.myMsg);\n            // alert(key+' '+e.data[key])\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\n            if (getBundleResult) {\n              this.message.destinationUserId = key;\n              this.message.destinationRegistrationId = e.data[key];\n              this.message.groupId = -1;\n              this.message.time = Date.now();\n              console.log(this.message.time);\n              this.msgList.push(\"####::\" + this.message.myMsg);\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\n              this.message.myMsg = '';\n              await this.websocketSend(JSON.stringify(cipherText));\n            }\n          }\n        });\n      }\n    },\n    get() {\n      this.$http.get('/keyOf/' + this.message.destinationUserId).then(response => {\n        console.log(response);\n        this.recvMsg = response.data;\n        this.store.dispatch('process-key', response.data).then(res => {\n          if (res === true) {\n            console.log(\"ok\");\n            return 'ok';\n          }\n        });\n      });\n    },\n    // onConfirm() {\n    //   //需要传输的数据\n    //   let data = {\n    //     code: 1,\n    //     item: '传输数据'\n    //   }\n    //   this.websocketSend(JSON.stringify(data))\n    // },\n    initWebSocket() {\n      // 初始化websocket\n      let url = 'ws://localhost:9090/websocket/' + this.store.getters.getUserId;\n      // alert(url)\n      this.websock = new WebSocket(url);\n      this.websock.onmessage = this.websocketOnMessage;\n      this.websock.onerror = this.websocketOnError;\n      this.websock.onclose = this.websocketClose;\n    },\n    // websocketOnOpen() { // 连接建立之后执行send方法发送数据\n    //   let data = {\n    //     code: 0,\n    //     msg: {\n    //       userId: this.store.getters.getUserId,\n    //       registrationId: this.store.getters.getRegistrationId,\n    //     }\n    //   }\n    //   // alert('post' + JSON.stringify(data))\n    //   // this.websocketSend(JSON.stringify(data))\n    // },\n    websocketOnError() {\n      console.log('WebSocket连接失败');\n    },\n    websocketOnMessage(e) {\n      // 数据接收\n      // alert('receive' + JSON.parse(e.data))\n      // console.log(e);\n      // console.log('数据接收' + e.data)\n      let newMsg = JSON.parse(e.data);\n      // alert(newMsg)\n      console.log(newMsg);\n      console.log(\"prepare to decrypt\");\n      // this.store.dispatch('check-info')\n      this.store.dispatch('decrypt-message', newMsg).then(res => {\n        console.log(res);\n        this.msg = res;\n        this.msgList.push(\"###::\" + res);\n      });\n      // console.log(decrypted);\n      // alert('你有新消息'+ decrypted);\n    },\n\n    websocketSend(Data) {\n      // 数据发送\n      this.websock.send(Data);\n      // alert('send' + Data)\n    },\n\n    websocketClose(e) {\n      // 关闭\n      console.log('已关闭连接', e);\n    },\n    onStore() {\n      this.store.dispatch('store-info').then(resCode => {\n        console.log(resCode);\n      });\n    },\n    onCheck() {\n      this.store.dispatch('check-info', this.message.destinationUserId).then(resObj => {\n        console.log(resObj);\n      });\n    },\n    onDelete() {\n      this.store.dispatch('delete-info', this.message.destinationUserId).then(res => {\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["useStore","setup","store","console","log","name","created","initWebSocket","data","getMessage","message","groupId","destinationUserId","destinationRegistrationId","myMsg","time","websocket","recvMsg","msgList","memberList","memberOne","groupID","msg","methods","addOne","push","cGroup","$http","post","groupMember","then","e","sendmessage","send","Date","now","key","alert","getBundleResult","dispatch","cipherText","websocketSend","JSON","stringify","userId","get","response","res","url","getters","getUserId","websock","WebSocket","onmessage","websocketOnMessage","onerror","websocketOnError","onclose","websocketClose","newMsg","parse","Data","onStore","resCode","onCheck","resObj","onDelete"],"sources":["C:\\Users\\25707\\Desktop\\112\\工作准备\\软件方向\\E2EE\\E2EE\\src\\components\\GroupChatPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"carrd\">\r\n      <div class=\"message-container\">\r\n        <div v-for=\"msg in msgList\" :key=\"msg.id\" class=\"gg\">\r\n          <div v-if=\"msg.includes('####')\" class=\"right\">\r\n            {{ msg.split('::')[1] }}\r\n          </div>\r\n          <div v-else class=\"left\">\r\n            {{ msg.split('::')[1] }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <textarea class=\"inputs\" type=\"text\" v-model=\"message.groupId\" placeholder=\"groupID\"/>\r\n      <textarea class=\"inputs\" type=\"text\" v-model=\"message.myMsg\" placeholder=\"myMsg\"/>\r\n      <el-button type=\"primary\" class=\"boxinput\" v-on:click=\"send\">Send</el-button>\r\n      <div>\r\n        <el-button type=\"default\" @click=\"sendmessage\">Create GroupChat</el-button>\r\n      </div>\r\n      <el-dialog v-model=\"getMessage\">\r\n        <el-form :model=\"ruleForm\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\">\r\n          <el-form-item>\r\n            <el-input v-model=\"groupID\" placeholder=\"群ID\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"收件人：\">{{ memberList.toString().replace(\"[\", '').replace(']', '') }}\r\n          </el-form-item>\r\n          <el-form-item label=\"\">\r\n            <el-input v-model=\"memberOne\" placeholder=\"用户ID:\" style=\"margin-top: 10px;\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button type=\"primary\" @click=\"addOne\" style=\"float:right\">添加</el-button>\r\n            <el-button type=\"primary\" @click=\"cGroup\" style=\"float:right\">创建</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-dialog>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {useStore} from 'vuex'\r\n\r\nexport default {\r\n  setup() {\r\n    const store = useStore()  // 该方法用于返回store 实例\r\n    console.log(store)  // store 实例对象\r\n    return {store}\r\n  },\r\n  name: \"ChatPage\",\r\n  created() {\r\n    console.log('created')\r\n    this.initWebSocket()\r\n  },\r\n  data() {\r\n    return {\r\n      getMessage: false,\r\n      message: {\r\n        groupId: -1,\r\n        destinationUserId: '',\r\n        destinationRegistrationId: '',\r\n        myMsg: '',\r\n        time: '',\r\n      },\r\n      websocket: null,\r\n      recvMsg: {},\r\n      msgList: [],\r\n      memberList: [],\r\n      memberOne: '',\r\n      groupID: '',\r\n      msg: ''\r\n    }\r\n  },\r\n  methods: {\r\n    addOne() {\r\n      this.memberList.push(this.memberOne);\r\n      this.memberOne = '';\r\n    },\r\n    cGroup() {\r\n      this.memberList.push(this.groupID)\r\n      this.$http.post('/createGroup', {\r\n        // groupId: this.groupID,//群聊ID，就用这个来识别群聊，应该吧，或者还要生成RID啥的\r\n        groupMember: this.memberList,//字面意思，list里是昵称\r\n        // userId: this.message.destinationUserId//记录创群人是谁，可有可无\r\n      }).then(async e => {\r\n        console.log(e.data);\r\n      })\r\n      this.groupID = '';\r\n      this.memberList = [];\r\n    },\r\n    sendmessage() {\r\n      this.getMessage = true;\r\n    },\r\n    send() {\r\n      console.log('send')\r\n      if (this.message.groupId !== -1) {\r\n        this.$http.post('/groupOrIndividual', {\r\n          groupId: this.message.groupId,\r\n          // userId: this.message.destinationUserId\r\n        }).then(async e => {\r\n          this.message.time = Date.now();\r\n          console.log(this.message.time);\r\n          this.msgList.push(\"####::\" + this.message.myMsg);\r\n          for (const key in e.data) {\r\n            alert(key)\r\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\r\n            if (getBundleResult) {\r\n\r\n              this.message.destinationUserId = key;\r\n              this.message.destinationRegistrationId = e.data[key];\r\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\r\n              alert(1)\r\n              await this.websocketSend(JSON.stringify(cipherText));\r\n            }\r\n            alert('ok')\r\n          }\r\n          this.message.myMsg='';\r\n        })\r\n      } else {\r\n        console.log(this.message.myMsg);\r\n        this.$http.post('/groupOrIndividual', {\r\n          groupId: -1,\r\n          userId: this.message.destinationUserId\r\n        }).then(async e => {\r\n          // alert(key+' '+e.data[key])\r\n          for (const key in e.data) {\r\n            console.log(this.message.destinationUserId);\r\n            console.log(this.message.myMsg);\r\n            // alert(key+' '+e.data[key])\r\n            let getBundleResult = await this.store.dispatch('get-key-bundle-of', key);\r\n            if (getBundleResult) {\r\n              this.message.destinationUserId = key;\r\n              this.message.destinationRegistrationId = e.data[key];\r\n              this.message.groupId = -1;\r\n              this.message.time = Date.now();\r\n              console.log(this.message.time);\r\n              this.msgList.push(\"####::\" + this.message.myMsg);\r\n              let cipherText = await this.store.dispatch('encrypt-message', this.message);\r\n              this.message.myMsg = '';\r\n              await this.websocketSend(JSON.stringify(cipherText));\r\n            }\r\n          }\r\n        })\r\n      }\r\n    },\r\n    get() {\r\n      this.$http.get('/keyOf/' + this.message.destinationUserId)\r\n          .then(response => {\r\n            console.log((response));\r\n            this.recvMsg = response.data;\r\n            this.store.dispatch('process-key', response.data)\r\n                .then(res => {\r\n                  if (res === true) {\r\n                    console.log(\"ok\");\r\n                    return 'ok';\r\n                  }\r\n                });\r\n          })\r\n\r\n    },\r\n    // onConfirm() {\r\n    //   //需要传输的数据\r\n    //   let data = {\r\n    //     code: 1,\r\n    //     item: '传输数据'\r\n    //   }\r\n    //   this.websocketSend(JSON.stringify(data))\r\n    // },\r\n    initWebSocket() { // 初始化websocket\r\n      let url = 'ws://localhost:9090/websocket/' + this.store.getters.getUserId;\r\n      // alert(url)\r\n      this.websock = new WebSocket(url);\r\n      this.websock.onmessage = this.websocketOnMessage\r\n      this.websock.onerror = this.websocketOnError\r\n      this.websock.onclose = this.websocketClose\r\n    },\r\n    // websocketOnOpen() { // 连接建立之后执行send方法发送数据\r\n    //   let data = {\r\n    //     code: 0,\r\n    //     msg: {\r\n    //       userId: this.store.getters.getUserId,\r\n    //       registrationId: this.store.getters.getRegistrationId,\r\n    //     }\r\n    //   }\r\n    //   // alert('post' + JSON.stringify(data))\r\n    //   // this.websocketSend(JSON.stringify(data))\r\n    // },\r\n    websocketOnError() {\r\n      console.log('WebSocket连接失败')\r\n    },\r\n    websocketOnMessage(e) { // 数据接收\r\n      // alert('receive' + JSON.parse(e.data))\r\n      // console.log(e);\r\n      // console.log('数据接收' + e.data)\r\n      let newMsg = JSON.parse(e.data);\r\n      // alert(newMsg)\r\n      console.log(newMsg);\r\n      console.log(\"prepare to decrypt\")\r\n      // this.store.dispatch('check-info')\r\n      this.store.dispatch('decrypt-message', newMsg)\r\n          .then(res => {\r\n            console.log(res);\r\n            this.msg = res;\r\n            this.msgList.push(\"###::\" + res);\r\n          });\r\n      // console.log(decrypted);\r\n      // alert('你有新消息'+ decrypted);\r\n    },\r\n    websocketSend(Data) { // 数据发送\r\n      this.websock.send(Data)\r\n      // alert('send' + Data)\r\n\r\n    },\r\n    websocketClose(e) {  // 关闭\r\n      console.log('已关闭连接', e)\r\n    },\r\n    onStore() {\r\n      this.store.dispatch('store-info')\r\n          .then(resCode => {\r\n            console.log(resCode);\r\n          });\r\n    },\r\n    onCheck() {\r\n      this.store.dispatch('check-info', this.message.destinationUserId)\r\n          .then(resObj => {\r\n            console.log(resObj);\r\n          });\r\n    },\r\n    onDelete() {\r\n      this.store.dispatch('delete-info', this.message.destinationUserId)\r\n          .then(res => {\r\n            console.log(res);\r\n          })\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.left {\r\n  width: 100%;\r\n  float: left;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  max-width: 90%;\r\n  padding: 20px;\r\n  border-radius: 20px 20px 20px 5px;\r\n  background-color: rgb(56, 60, 75);\r\n  color: #fff;\r\n}\r\n\r\n.right {\r\n  width: auto;\r\n  float: right;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n  max-width: 90%;\r\n  padding: 20px;\r\n  border-radius: 20px 20px 5px 20px;\r\n  background-color: rgb(29, 144, 245);\r\n  color: #fff;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.boxinput {\r\n  width: 50px;\r\n  height: 50px;\r\n  float: bottom;\r\n  background-color: rgb(66, 70, 86);\r\n  border-radius: 15px;\r\n  border: 1px solid rgb(80, 85, 103);\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.inputs {\r\n  width: 90%;\r\n  height: 50px;\r\n  float: bottom;\r\n  background-color: rgb(66, 70, 86);\r\n  border-radius: 15px;\r\n  border: 2px solid rgb(34, 135, 225);\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  transition: 0.2s;\r\n  font-size: 20px;\r\n  color: #fff;\r\n  font-weight: 100;\r\n}\r\n\r\n.carrd {\r\n  width: 80vw;\r\n  height: 80vh;\r\n  margin: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  padding-bottom: 20px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n.message-container {\r\n  height: 420px; /* 设置容器的高度，根据需要进行调整 */\r\n  overflow-y: auto; /* 添加垂直滚动条 */\r\n}\r\n.gg{\r\n  width:500px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}