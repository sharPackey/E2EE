{"ast":null,"code":"import _ from 'lowdash';\nconst ls = window.libsignal;\nfunction SignalProtocolStore() {\n  this.store = {};\n}\nSignalProtocolStore.prototype = {\n  Direction: {\n    SENDING: 1,\n    RECEIVING: 2\n  },\n  getIdentityKeyPair: function () {\n    return Promise.resolve(this.get('identityKey'));\n  },\n  getLocalRegistrationId: function () {\n    return Promise.resolve(this.get('registrationId'));\n  },\n  put: function (key, value) {\n    if (key === undefined || value === undefined || key === null || value === null) throw new Error('Tried to store undefined/null');\n    this.store[key] = value;\n  },\n  get: function (key, defaultValue) {\n    if (key === null || key === undefined) throw new Error('Tried to get value for undefined/null key');\n    if (key in this.store) {\n      return this.store[key];\n    } else {\n      return defaultValue;\n    }\n  },\n  remove: function (key) {\n    if (key === null || key === undefined) throw new Error('Tried to remove value for undefined/null key');\n    delete this.store[key];\n  },\n  isTrustedIdentity: function (identifier, identityKey, direction) {\n    if (identifier === null || identifier === undefined) {\n      throw new Error('tried to check identity key for undefined/null key');\n    }\n    if (!(identityKey instanceof ArrayBuffer)) {\n      throw new Error('Expected identityKey to be an ArrayBuffer');\n    }\n    let trusted = this.get('identityKey' + identifier);\n    if (trusted === undefined) {\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(_.toString(identityKey) === _.toString(trusted));\n  },\n  loadIdentityKey: function (identifier) {\n    if (identifier === null || identifier === undefined) throw new Error('Tried to get identity key for undefined/null key');\n    return Promise.resolve(this.get('identityKey' + identifier));\n  },\n  saveIdentity: function (identifier, identityKey) {\n    if (identifier === null || identifier === undefined) throw new Error('Tried to put identity key for undefined/null key');\n    let address = new ls.SignalProtocolAddress.fromString(identifier);\n    let existing = this.get('identityKey' + address.getName());\n    this.put('identityKey' + address.getName(), identityKey);\n    if (existing && _.toString(identityKey) !== _.toString(existing)) {\n      return Promise.resolve(true);\n    } else {\n      return Promise.resolve(false);\n    }\n  },\n  /* Returns a prekeypair object or undefined */\n  loadPreKey: function (keyId) {\n    let res = this.get('25519KeypreKey' + keyId);\n    if (res !== undefined) {\n      res = {\n        pubKey: res.pubKey,\n        privKey: res.privKey\n      };\n    }\n    return Promise.resolve(res);\n  },\n  storePreKey: function (keyId, keyPair) {\n    return Promise.resolve(this.put('25519KeypreKey' + keyId, keyPair));\n  },\n  removePreKey: function (keyId) {\n    return Promise.resolve(this.remove('25519KeypreKey' + keyId));\n  },\n  /* Returns a signed keypair object or undefined */\n  loadSignedPreKey: function (keyId) {\n    let res = this.get('25519KeysignedKey' + keyId);\n    if (res !== undefined) {\n      res = {\n        pubKey: res.pubKey,\n        privKey: res.privKey\n      };\n    }\n    return Promise.resolve(res);\n  },\n  storeSignedPreKey: function (keyId, keyPair) {\n    return Promise.resolve(this.put('25519KeysignedKey' + keyId, keyPair));\n  },\n  removeSignedPreKey: function (keyId) {\n    return Promise.resolve(this.remove('25519KeysignedKey' + keyId));\n  },\n  loadSession: function (identifier) {\n    return Promise.resolve(this.get('session' + identifier));\n  },\n  storeSession: function (identifier, record) {\n    return Promise.resolve(this.put('session' + identifier, record));\n  },\n  removeSession: function (identifier) {\n    return Promise.resolve(this.remove('session' + identifier));\n  },\n  removeAllSessions: function (identifier) {\n    for (let id in this.store) {\n      if (id.startsWith('session' + identifier)) {\n        delete this.store[id];\n      }\n    }\n    return Promise.resolve();\n  }\n};\nexport const InMemorySignalProtocolStore = SignalProtocolStore;","map":{"version":3,"names":["_","ls","window","libsignal","SignalProtocolStore","store","prototype","Direction","SENDING","RECEIVING","getIdentityKeyPair","Promise","resolve","get","getLocalRegistrationId","put","key","value","undefined","Error","defaultValue","remove","isTrustedIdentity","identifier","identityKey","direction","ArrayBuffer","trusted","toString","loadIdentityKey","saveIdentity","address","SignalProtocolAddress","fromString","existing","getName","loadPreKey","keyId","res","pubKey","privKey","storePreKey","keyPair","removePreKey","loadSignedPreKey","storeSignedPreKey","removeSignedPreKey","loadSession","storeSession","record","removeSession","removeAllSessions","id","startsWith","InMemorySignalProtocolStore"],"sources":["C:/Users/25707/Desktop/112/工作准备/软件方向/E2EE/E2EE/public/InMemorySignalProtocolStore.js"],"sourcesContent":["import _ from 'lowdash';\r\n\r\nconst ls = window.libsignal;\r\n\r\nfunction SignalProtocolStore () {\r\n    this.store = {};\r\n}\r\n\r\nSignalProtocolStore.prototype = {\r\n    Direction: {\r\n        SENDING: 1,\r\n        RECEIVING: 2,\r\n    },\r\n\r\n    getIdentityKeyPair: function () {\r\n        return Promise.resolve(this.get('identityKey'));\r\n    },\r\n    getLocalRegistrationId: function () {\r\n        return Promise.resolve(this.get('registrationId'));\r\n    },\r\n    put: function (key, value) {\r\n        if (key === undefined || value === undefined || key === null || value === null)\r\n            throw new Error('Tried to store undefined/null');\r\n        this.store[key] = value;\r\n    },\r\n    get: function (key, defaultValue) {\r\n        if (key === null || key === undefined)\r\n            throw new Error('Tried to get value for undefined/null key');\r\n        if (key in this.store) {\r\n            return this.store[key];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    },\r\n    remove: function (key) {\r\n        if (key === null || key === undefined)\r\n            throw new Error('Tried to remove value for undefined/null key');\r\n        delete this.store[key];\r\n    },\r\n\r\n    isTrustedIdentity: function (identifier, identityKey, direction) {\r\n        if (identifier === null || identifier === undefined) {\r\n            throw new Error('tried to check identity key for undefined/null key');\r\n        }\r\n        if (!(identityKey instanceof ArrayBuffer)) {\r\n            throw new Error('Expected identityKey to be an ArrayBuffer');\r\n        }\r\n        let trusted = this.get('identityKey' + identifier);\r\n        if (trusted === undefined) {\r\n            return Promise.resolve(true);\r\n        }\r\n        return Promise.resolve(_.toString(identityKey) === _.toString(trusted));\r\n    },\r\n    loadIdentityKey: function (identifier) {\r\n        if (identifier === null || identifier === undefined)\r\n            throw new Error('Tried to get identity key for undefined/null key');\r\n        return Promise.resolve(this.get('identityKey' + identifier));\r\n    },\r\n    saveIdentity: function (identifier, identityKey) {\r\n        if (identifier === null || identifier === undefined)\r\n            throw new Error('Tried to put identity key for undefined/null key');\r\n\r\n        let address = new ls.SignalProtocolAddress.fromString(identifier);\r\n\r\n        let existing = this.get('identityKey' + address.getName());\r\n        this.put('identityKey' + address.getName(), identityKey);\r\n\r\n        if (existing && _.toString(identityKey) !== _.toString(existing)) {\r\n            return Promise.resolve(true);\r\n        } else {\r\n            return Promise.resolve(false);\r\n        }\r\n    },\r\n\r\n    /* Returns a prekeypair object or undefined */\r\n    loadPreKey: function (keyId) {\r\n        let res = this.get('25519KeypreKey' + keyId);\r\n        if (res !== undefined) {\r\n            res = {pubKey: res.pubKey, privKey: res.privKey};\r\n        }\r\n        return Promise.resolve(res);\r\n    },\r\n    storePreKey: function (keyId, keyPair) {\r\n        return Promise.resolve(this.put('25519KeypreKey' + keyId, keyPair));\r\n    },\r\n    removePreKey: function (keyId) {\r\n        return Promise.resolve(this.remove('25519KeypreKey' + keyId));\r\n    },\r\n\r\n    /* Returns a signed keypair object or undefined */\r\n    loadSignedPreKey: function (keyId) {\r\n        let res = this.get('25519KeysignedKey' + keyId);\r\n        if (res !== undefined) {\r\n            res = {pubKey: res.pubKey, privKey: res.privKey};\r\n        }\r\n        return Promise.resolve(res);\r\n    },\r\n    storeSignedPreKey: function (keyId, keyPair) {\r\n        return Promise.resolve(this.put('25519KeysignedKey' + keyId, keyPair));\r\n    },\r\n    removeSignedPreKey: function (keyId) {\r\n        return Promise.resolve(this.remove('25519KeysignedKey' + keyId));\r\n    },\r\n\r\n    loadSession: function (identifier) {\r\n        return Promise.resolve(this.get('session' + identifier));\r\n    },\r\n    storeSession: function (identifier, record) {\r\n        return Promise.resolve(this.put('session' + identifier, record));\r\n    },\r\n    removeSession: function (identifier) {\r\n        return Promise.resolve(this.remove('session' + identifier));\r\n    },\r\n    removeAllSessions: function (identifier) {\r\n        for (let id in this.store) {\r\n            if (id.startsWith('session' + identifier)) {\r\n                delete this.store[id];\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n};\r\n\r\nexport const InMemorySignalProtocolStore = SignalProtocolStore;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}